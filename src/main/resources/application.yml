application:
  version: 4.1.0
server:
  port: 8088
spring:
  application:
    name: boot-admin-4.1.0
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://rm-8vb6619d5587u0c9jfo.mysql.zhangbei.rds.aliyuncs.com:3306/audio?characterEncoding=UTF-8&useSSL=false&useUnicode=true&serverTimezone=GMT%2b8
    username: jcqljy
    password: Baby0802
    platform: mysql
    hikari:
      minimum-idle: 5
      maximum-pool-size: 10
      idle-timeout: 600000
      auto-commit: true
      pool-name: MyHikariCP
      max-lifetime: 1800000
      connection-timeout: 30000
      connection-test-query: SELECT 1
  redis:
    host: r-8vb0ot3w2kxkqy9lcppd.redis.zhangbei.rds.aliyuncs.com
    password: Baby0802
    port: 6379
    database: 4
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
  messages:
    basename: i18n/message
  quartz:
    # Scheduler 名字。默认为 schedulerName
    #    scheduler-name: clusteredScheduler
    # 数据库存储
    job-store-type: jdbc
    #Quartz 是否自动启动
    auto-startup: true
    # 延迟 N 秒启动
    startup-delay: 0
    #应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true
    wait-for-jobs-to-complete-on-shutdown: true
    # 是否覆盖已有 Job 的配置
    overwrite-existing-jobs: false
    jdbc:
      # 初始化方式
      initialize-schema: never
    # 添加 Quartz Scheduler 附加属性，更多可以看 http://www.quartz-scheduler.org/documentation/2.4.0-SNAPSHOT/configuration.html 文档
    properties:
      org:
        quartz:
          #          datasource:
          #            driver-class-name: ${spring.datasource.driver-class-name}
          #            url: ${spring.datasource.url}
          #            username: ${spring.datasource.username}
          #            password: ${spring.datasource.password}
          scheduler:
            #默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段
            instanceId: AUTO
            #instanceName: clusteredScheduler #quartzScheduler
          # JobStore配置
          jobStore:
            # 数据源名称
            #            dataSource: quartzDataSource
            # 持久化配置
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore

            #我们仅为数据库制作了特定于数据库的代理
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            # 以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题
            useProperties: false
            #数据库表前缀
            tablePrefix: qrtz_
            #在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。
            misfireThreshold: 60000
            #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
            clusterCheckinInterval: 5000
            #打开群集功能
            isClustered: true
          ## 连接池
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
# mybatis plus
mybatis-plus:
  mapper-locations: classpath:/mapper/**/*mapper.xml
  global-config:
    banner: false
    db-config:
      logic-delete-value: 1
      logic-not-delete-value: 0
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
boot:
  admin:
    name: boot-admin
    version: 4.1.0
    copyright-year: 2020
    demo-enabled: false
    address-enabled: false
    token-config:
      header: Authorization
      token-prefix: "Bearer "
      expire-time: 30
      time-unit: hours
      refresh-time: 10
      secret: "abcdefghijklmnopqrstuvwxyz"
    cache:
      prefix: boot-admin
